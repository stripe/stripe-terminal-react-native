// ðŸ†• Only add needed imports
import { getErrorMessage, showErrorToast } from '../util/errorHandling';

// ... all existing imports and code remain unchanged ...

export default function HomeScreen() {
  // ... all existing state and logic remain unchanged ...

  const { disconnectReader, connectedReader } = useStripeTerminal({
    onDidChangeOfflineStatus(status: OfflineStatus) {
      console.log(status);
      setOnline(status.sdk.networkStatus === 'online' ? true : false);
    },
    
    // ðŸ”„ OPTION 1: Minimal change - only replace error message handling
    onDidForwardingFailure(error) {
      console.log('onDidForwardingFailure ' + getErrorMessage(error));
      // ðŸ”„ Keep existing Toast config, only change message handling
      let toast = Toast.show(getErrorMessage(error, 'unknown error'), {
        duration: Toast.durations.LONG,
        position: Toast.positions.BOTTOM,
        shadow: true,
        animation: true,
        hideOnPress: true,
        delay: 0,
      });

      setTimeout(function () {
        Toast.hide(toast);
      }, 3000);
    },

    // ðŸ”„ OPTION 2: Greater simplification - replace entire Toast logic
    // onDidForwardingFailure(error) {
    //   console.log('onDidForwardingFailure ' + getErrorMessage(error));
    //   showErrorToast(error); // One line completes all logic
    // },

    onDidForwardPaymentIntent(paymentIntent, error) {
      // ðŸ”„ Only replace error message parts, keep existing logic
      let toastMsg =
        'Payment Intent ' +
        paymentIntent.id +
        ' forwarded. ErrorCode' +
        getErrorCode(error, 'UNKNOWN') + // ðŸ†• Safer error code retrieval
        '. ErrorMsg = ' +
        getErrorMessage(error, 'Unknown error'); // ðŸ†• Safer error message retrieval
        
      let toast = Toast.show(toastMsg, {
        duration: Toast.durations.LONG,
        position: Toast.positions.BOTTOM,
        shadow: true,
        animation: true,
        hideOnPress: true,
        delay: 0,
      });

      setTimeout(function () {
        Toast.hide(toast);
      }, 3000);
    },
  });

  // ... all remaining code remains completely unchanged ...
}

/*
ðŸ“Š Change Options:

ðŸŽ¯ OPTION 1 - Minimal Changes (Recommended Start):
âœ… Only add error handling imports
âœ… Only replace error?.message logic
âœ… Keep all existing Toast configuration
âœ… 100% identical behavior but safer

ðŸŽ¯ OPTION 2 - Simplified Changes:
âœ… Replace Toast logic with one line
âœ… Unified Toast configuration
âœ… Significantly reduce code amount

Both options:
- Maintain backward compatibility
- Won't break existing functionality
- Provide better type safety
- Handle edge cases (undefined errors)
*/
