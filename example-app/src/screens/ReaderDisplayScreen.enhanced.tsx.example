import React, { useState } from 'react';
import {
  Alert,
  ScrollView,
  Platform,
  StyleSheet,
  TextInput,
} from 'react-native';
import List from '../components/List';
import ListItem from '../components/ListItem';
import { useStripeTerminal } from '@stripe/stripe-terminal-react-native';
import { colors } from '../colors';
// ðŸ†• ONLY NEW IMPORT - add just one new import
import { showErrorAlert } from '../util/errorHandling';

export default function ReaderDisplayScreen() {
  const { setReaderDisplay, clearReaderDisplay } = useStripeTerminal();
  const [cart, setCart] = useState<{
    currency?: string;
    tax?: string;
    amount?: string;
    itemDescription: string;
  }>({
    currency: 'usd',
    tax: '200',
    amount: '5000',
    itemDescription: 'Red t-shirt',
  });

  const _setCartDisplay = async () => {
    const { error } = await setReaderDisplay({
      currency: cart.currency!,
      tax: Number(cart.tax),
      total: Number(cart.amount) + Number(cart.tax),
      lineItems: [
        {
          displayName: cart.itemDescription,
          quantity: 1,
          amount: Number(cart.amount),
        },
      ],
    });

    if (error) {
      console.log('error', error);
      // ðŸ”„ MINIMAL CHANGE - change only one line, same behavior but safer
      showErrorAlert(error, 'setReaderDisplay error');
      // Before: Alert.alert('setReaderDisplay error', error.message);
      return;
    }

    Alert.alert('setReaderDisplay success');
    console.log('setReaderDisplay success');
  };

  const _clearReaderDisplay = async () => {
    const { error } = await clearReaderDisplay();

    if (error) {
      console.log('error', error);
      // ðŸ”„ MINIMAL CHANGE - change only one line, same behavior but safer
      showErrorAlert(error, 'clearReaderDisplay error');
      // Before: Alert.alert('clearReaderDisplay error', error.message);
    } else {
      console.log('clearReaderDisplay success');
      Alert.alert('clearReaderDisplay success');
    }
  };

  // ... rest of the code remains completely unchanged
  return (
    <ScrollView
      contentContainerStyle={styles.container}
      // ... all existing props and logic remain unchanged
    >
      {/* All existing JSX remains unchanged */}
    </ScrollView>
  );
}

// All existing styles remain unchanged
const styles = StyleSheet.create({
  // ... existing styles
});

/*
ðŸ“Š Change Summary:
âœ… Only add 1 import statement
âœ… Only modify 2 error handling lines
âœ… All other code remains completely unchanged
âœ… Behavior remains identical but safer
âœ… Type safety improved
âœ… Won't break existing functionality

ðŸŽ¯ Benefits:
- Automatically handles cases where error.message might be undefined
- Unified error handling patterns
- TypeScript type safety
- Backward compatible
*/
